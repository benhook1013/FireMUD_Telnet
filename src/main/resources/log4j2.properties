name=PropertiesConfigTelnet
property.filename = FireEngine_Telnet.log

status = error
dest = err
appenders = console, file

appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%t] - %msg%n
# Layout documentation: https://logging.apache.org/log4j/2.x/manual/layouts.html
# d{pattern} Outputs the date of the logging event. The date conversion specifier may be followed by a set of braces containing a date and time pattern string per SimpleDateFormat.
# level{level=label, level=label, ...} Outputs the level of the logging event. You provide a level name map in the form "level=value, level=value" where level is the name of the Level and value is the value that should be displayed instead of the name of the Level.
# t Used to output the name of the thread that generated the logging event.
# msg{lookups}{ansi} Outputs the application supplied message associated with the logging event. Add {ansi} to render messages with ANSI escape codes (requires JAnsi, see configuration.)
# n Outputs the platform dependent line separator character or characters. This conversion character offers practically the same performance as using non-portable line separator strings such as "\n", or "\r\n". Thus, it is the preferred way of specifying a line separator.
# c{precision} Outputs the name of the logger that published the logging event.
# C{precision} Outputs the fully qualified class name of the caller issuing the logging request. Generating the class name of the caller (location information) is an expensive operation and may impact performance. Use with caution.

appender.file.type = File
appender.file.name = LOGFILE
appender.file.fileName=${filename}
appender.file.layout.type=PatternLayout
appender.file.layout.pattern= %d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%t] - %msg%n

loggers=file
logger.file.name=${filename}
logger.file.level = info
logger.file.appenderRefs = file
logger.file.appenderRef.file.ref = LOGFILE

rootLogger.level = info
rootLogger.appenderRef.stdout.ref = STDOUT